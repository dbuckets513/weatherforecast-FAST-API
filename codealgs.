pip install fastapi uvicorn sqlalchemy databases
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional
from sqlalchemy import create_engine, Column, Integer, String, Float, MetaData, Table, select
from databases import Database

app = FastAPI()

DATABASE_URL = "sqlite:///./weather.db"
database = Database(DATABASE_URL)

metadata = MetaData()
weather = Table(
    "weather",
    metadata,
    Column("id", Integer, primary_key=True, index=True),
    Column("city", String, unique=True),
    Column("current_temperature", Float),
    Column("current_conditions", String),
    Column("forecast_high", Float),
    Column("forecast_low", Float),
    Column("forecast_conditions", String),
)

engine = create_engine(
    DATABASE_URL, connect_args={"check_same_thread": False}
)
metadata.create_all(engine)

class WeatherData(BaseModel):
    city: str
    current_temperature: float
    current_conditions: str
    forecast_high: float
    forecast_low: float
    forecast_conditions: str

@app.on_event("startup")
async def startup():
    await database.connect()

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()

@app.post("/weather/", response_model=WeatherData)
async def create_weather_data(weather_data: WeatherData):
    query = weather.insert().values(
        city=weather_data.city,
        current_temperature=weather_data.current_temperature,
        current_conditions=weather_data.current_conditions,
        forecast_high=weather_data.forecast_high,
        forecast_low=weather_data.forecast_low,
        forecast_conditions=weather_data.forecast_conditions,
    )
    last_record_id = await database.execute(query)
    return {**weather_data.dict(), "id": last_record_id}

@app.get("/weather/{city}", response_model=WeatherData)
async def get_weather_data(city: str):
    query = select([weather]).where(weather.c.city == city)
    row = await database.fetch_one(query)
    if row is None:
        raise HTTPException(status_code=404, detail="City not found")
    return dict(row)

@app.get("/weather/", response_model=List[WeatherData])
async def get_all_weather_data(skip: int = 0, limit: int = 10):
    query = weather.select().offset(skip).limit(limit)
    rows = await database.fetch_all(query)
    return [dict(row) for row in rows]


  
  #Create an HTML form (index.html) for submitting weather data:

  
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Service</title>
</head>
<body>
    <h1>Add Weather Data</h1>
    <form action="/weather/" method="post">
        <label for="city">City:</label><br>
        <input type="text" id="city" name="city"><br>
        <label for="current_temperature">Current Temperature:</label><br>
        <input type="number" id="current_temperature" name="current_temperature"><br>
        <label for="current_conditions">Current Conditions:</label><br>
        <input type="text" id="current_conditions" name="current_conditions"><br>
        <label for="forecast_high">Forecast High:</label><br>
        <input type="number" id="forecast_high" name="forecast_high"><br>
        <label for="forecast_low">Forecast Low:</label><br>
        <input type="number" id="forecast_low" name="forecast_low"><br>
        <label for="forecast_conditions">Forecast Conditions:</label><br>
        <input type="text" id="forecast_conditions" name="forecast_conditions"><br><br>
        <input type="submit" value="Submit">
    </form>
</body>
</html>



# to run the app input the code below
  #uvicorn main:app --reload
#Access the HTML form at http://localhost:8000 to submit weather data and retrieve it using the API endpoints.
